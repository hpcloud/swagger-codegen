/* DO NOT EDIT: This code has been generated by swagger-codegen */
(function () {
  'use strict';

  angular
    .module('cloud-foundry.api')
    .run(registerApi);

  registerApi.$inject = [
    '$http',
    'app.api.apiManager'
  ];

  {{#operations}}
  function registerApi($http, apiManager) {
    apiManager.register('cloud-foundry.api.{{classname}}', new {{classname}}($http));
  }

  /**
    * @constructor
    * @name {{classname}}
    * @description For more information on this API, please see:
    * https://github.com/hpcloud/hce-rest-service/blob/master/app/v2/swagger.yml
    * @param {object} $http - the Angular $http service
    * @property {object} $http - the Angular $http service
    * @property {string} baseUrl - the API base URL
    * @property {object} defaultHeaders - the default headers
    */
  function {{classname}}($http) {
    this.$http = $http;
    this.baseUrl = '/proxy/v2';
  }

  angular.extend({{classname}}.prototype, {
    {{#operation}}
    /**
     * @name {{nickname}}
     * @description {{summary}}{{#pathParams}}
     * @param {!{{dataType}}} {{paramName}} - {{description}}{{/pathParams}}{{#bodyParam}}
     * @param {object} data - the request body{{/bodyParam}}{{#hasFormParams}}
     * @param {object} data - the request form data{{/hasFormParams}}
     * @param {object} params - the query parameters
     * @returns {promise} A resolved/rejected promise
     */
    {{nickname}}: function (guid, {{#pathParams}}{{paramName}}, {{/pathParams}}{{#bodyParam}}data, {{/bodyParam}}{{#hasFormParams}}data, {{/hasFormParams}}params) {
      var path = this.baseUrl + '{{path}}'{{#pathParams}}
        .replace('{' + '{{baseName}}' + '}', {{paramName}}){{/pathParams}};
      var headers = {
        cnsi_guid: guid
      };{{#headerParams}}
      headers['{{baseName}}'] = {{paramName}};{{#consumes.1}}
      headers['Content-Type'] = '{{mediaType}}';{{/consumes.1}}{{/headerParams}}{{^headerParams}}{{#consumes.1}}
      headers['Content-Type'] = '{{mediaType}}';{{/consumes.1}}{{/headerParams}}

      var config = {
        method: '{{httpMethod}}',
        url: path,
        params: params || {},{{#bodyParam}}
        data: data,{{/bodyParam}}{{#hasFormParams}}
        data: data,{{/hasFormParams}}
        headers: headers
      };

      return this.$http(config);
    }{{#hasMore}},

    {{/hasMore}}
  {{/operation}}

  });
  {{/operations}}
})();
